<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_nuvo_ko.directives</name>
        <script><![CDATA[function tag_def() {
    var tag = {
        templateUrl: 'AJAXJellyRunner.do?template=x_nuvo_ko_Tag'
    };
    return tag;
}

function votes_def() {
    var votes = {
        controller: votes_ctrl,
		controllerAs: 'vvm',
        scope: false,
        templateUrl: 'AJAXJellyRunner.do?template=x_nuvo_ko_Votes'
    };

    function votes_ctrl($scope, voteService, questionService) {
        var vvm = this;
		for (var param in $scope.vm) vvm[param] = $scope.vm[param];
        vvm.type = vvm.answer_id ? 'answer' : 'question';
        var id = (vvm.type === 'question' ? vvm.question_id : vvm.answer_id);
		
		questionService.subscribe(function(data){
			if(data && data.question_id == id){
				vvm.votes = data.votes;
				vvm.starred = data.starred;
			}
		});

		vvm.vote = function (dir) {
            vvm.votes += (dir - vvm.direction);
            vvm.direction = dir;
            voteService.vote(dir, id, vvm.type);
        };

        voteService.get(id, vvm.type);
        voteService.subscribe(function (data) {
            if (data.id === id) vvm.direction = data.dir;
        });

        if (vvm.type == 'question') {
            vvm.toggleStarred = function () {
                vvm.starred = !vvm.starred;
                questionService.toggleStarred(vvm.starred, id);
            };
        } else {
            vvm.markBestAnswer = function (type) {
                questionService.markBestAnswer($scope.$parent.vm.question_id, vvm.answer_id, type).then(function () {
                    questionService.get($scope.$parent.vm.question_id);
                });
            };
            vvm.moderator = g_user.hasRoleExactly('x_nuvo_ko.mod');

            vvm.best_answer = $scope.$parent.vm.best_answer === vvm.answer_id;
            vvm.best_answer_type = $scope.$parent.vm.best_answer_type;
            vvm.question_author = $scope.$parent.vm.author == g_user.getFullName();
        }
    }

    return votes;
}

function editor_def(){
    var editor = {
        templateUrl:"AJAXJellyRunner.do?template=x_nuvo_ko_Editor",
        controller: editor_ctrl,
        scope:false,
    };

    function editor_ctrl($scope, $element){
        var vm = $scope.vm;
        vm.editorText = "";
        var mde = new SimpleMDE({
            element: $element[0].querySelector('.editor'),
            parsingConfig: {
                allowAtxHeaderWithoutSpace: false,
                strikethrough: false
            },
            renderingConfig: {
                singleLineBreaks: true,
                codeSyntaxHighlighting: true
            },
            toolbar: ["bold", "italic", "strikethrough", "|", "heading-1", "heading-2", "|", "code", "quote", "|", "link", "image", "table", "horizontal-rule", "|", "guide"],
            shortcuts: {
                "toggleSideBySide": null,
                "toggleFullScreen": null,
                "togglePreview": null
            },
			spellChecker: false,
            status: false,
            forceSync: true
        });
        
        mde.codemirror.on("change", function () {
            vm.editorText = mde.value();
            if(!$scope.$$phase) $scope.$apply();
        });

        $scope.$watch('vm.editorText', function(newVal){
            if(newVal=="" || mde.value() =="")mde.value(newVal);
        });
    }

    return editor;
}

function comments_def() {
    var comments = {
        controller: comments_ctrl,
        controllerAs: 'cvm',
        scope: false,
        templateUrl: 'AJAXJellyRunner.do?template=x_nuvo_ko_Comments'
    };

    function comments_ctrl($scope, questionService, createService) {
        var cvm = this;
        cvm.comments = $scope.vm.comments;
        cvm.type = $scope.vm.answer_id ? 'answer' : 'question';
        cvm.id = (cvm.type === 'question' ? $scope.vm.question_id : $scope.vm.answer_id);

        if(cvm.type === 'question') questionService.subscribe(function(d){
			if(d){
            cvm.comments = d.comments;
            cvm.commenting = false;
            cvm.commentText = "";
			}
        });

        cvm.commenting = false;
        cvm.commentText = "";

        cvm.postComment = function () {
            createService.createComment(cvm.type, cvm.id, cvm.commentText).then(function () {
                if(cvm.type=='answer') questionService.get($scope.$parent.vm.question_id);
                else questionService.get(cvm.id);
            });
        };


        cvm.expand = false;
        cvm.minifiedResults = 4;
    }

    return comments;
}


function answer_def() {
    var answer = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_Answer",
        controller: answer_ctrl,
        controllerAs: "vm",
        scope: false
    };

    function answer_ctrl($scope, createService, questionService) {
        var vm = this;
        for (var param in $scope.answer) vm[param] = $scope.answer[param];
		vm.question_id = $scope.$parent.vm.question_id;
    }

    return answer;
}

function answer_preview_def() {
    var preview = {
        controller: preview_ctrl,
        controllerAs: 'vm',
        scope: false,
        templateUrl: 'AJAXJellyRunner.do?template=x_nuvo_ko_AnswerPreview'
    };

    function preview_ctrl($scope) {
        var vm = this;
        for (var param in $scope.preview) vm[param] = $scope.preview[param];
    }

    return preview;
}

function question_preview_def() {
    var preview = {
        controller: preview_ctrl,
        controllerAs: 'vm',
        scope: false,
        templateUrl: 'AJAXJellyRunner.do?template=x_nuvo_ko_QuestionPreview'
    };

    function preview_ctrl($scope) {
        var vm = this;
        for (var param in $scope.preview) vm[param] = $scope.preview[param];
    }

    return preview;
}

function banner_def() {
    var banner = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_Banner",
        scope: true,
        controller: banner_ctrl,
        controllerAs: 'vm'
    };

    function banner_ctrl() {
        var vm = this;
        vm.initials = g_user.firstName.slice(0, 1) + g_user.lastName.slice(0, 1);
    }

    return banner;
}

function search_def() {
    var search = {
        templateUrl: "AJAXJellyRunner.do?template=x_nuvo_ko_SearchBar",
        controller: search_ctrl,
        controllerAs: "vm",
        scope: true
    };

    function search_ctrl($state) {
        var vm = this;
        vm.search = function () {
            $state.go('search', {
                q: vm.searchText
            });
        };
        vm.searchText = "";
    }

    return search;
}



function results_def() {
    var results = {
        templateUrl: 'AJAXJellyRunner.do?template=x_nuvo_ko_PaginatedResults',
        scope: true,
        controller: results_ctrl,
        controllerAs: 'vm'
    };

    function results_ctrl($stateParams, $scope, resultsService) {
        var vm = this;
        vm.filter = $stateParams.filter;

        vm.page = 1;

        vm.method = $scope.$parent.vm.resultsMethod;
        if (vm.filter === undefined) {
            vm.filter = vm.method == 'search' ? 'relevance' : 'newest';
        }
        vm.params = $scope.$parent.vm.params;
        if (vm.params == undefined) vm.params = {};

        vm.update = function () {
            resultsService.query(vm.method, vm.filter, vm.page, vm.params)
                .then(function (data) {
                    vm.previews = data.previews;
                    vm.results = data.results;
                    vm.totalPages = Math.ceil(vm.results / data.pageSize);
                    vm.type = data.type;
                });
        };
        vm.update();

        vm.nextPage = function () {
            vm.page++;
            vm.update();
        };
        vm.lastPage = function () {
            vm.page--;
            if (vm.page < 1) vm.page = 1;
            vm.update();
        };
    }

    return results;
}]]></script>
        <script_name>directives</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>Nicholas.Durkin@nuvolo.com</sys_created_by>
        <sys_created_on>2019-07-15 19:55:23</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7e05d02bdb6e3b408fdd3df339961948</sys_id>
        <sys_mod_count>138</sys_mod_count>
        <sys_name>x_nuvo_ko.directives</sys_name>
        <sys_package display_value="Knowledge Overflow" source="x_nuvo_ko">9c384c6b1b2ebf004fc10f6e6e4bcb4a</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Knowledge Overflow">9c384c6b1b2ebf004fc10f6e6e4bcb4a</sys_scope>
        <sys_update_name>sys_ui_script_7e05d02bdb6e3b408fdd3df339961948</sys_update_name>
        <sys_updated_by>Nicholas.Durkin@nuvolo.com</sys_updated_by>
        <sys_updated_on>2019-07-25 19:21:22</sys_updated_on>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
